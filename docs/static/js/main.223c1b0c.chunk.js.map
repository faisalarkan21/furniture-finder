{"version":3,"sources":["utils/api.js","utils/truncate.js","App.js","serviceWorker.js","index.js"],"names":["Services","this","baseUrl","params","axios","get","then","data","truncate","input","maxChar","length","substring","Meta","Card","Option","Select","Search","Input","App","props","filterSearchInput","dataFetch","searchInput","state","newList","filter","item","lc","name","toLowerCase","includes","setState","products","filterSelectStyle","tempResultFoundFilter","filterFurnitureStyle","tempDataFilter","forEach","v","every","x","furniture_style","push","filterSelectDelivery","filterDeliveryDays","parseFilterDeliveryDays","map","JSON","parse","result","parseInt","delivery_time","start","end","tempMergedResultFilter","concat","onFilterFurnitureStyle","value","handleFetch","onFilterDeliveryDays","onChangeFilterInput","e","target","handleRenderCard","componentCard","flex","className","span","title","numeral","price","format","description","color","type","ghost","gutter","placeholder","onChange","mode","style","width","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.223c1b0c.chunk.js","sourcesContent":["import axios from 'axios';\n\nclass Services {\n  constructor() {\n    this.baseUrl = 'http://www.mocky.io/v2/';\n  }\n\n  get(params) {\n    return axios.get(`${this.baseUrl}${params}`).then(({ data }) => data);\n  }\n}\n\nexport default Services;\n","function truncate(input = '', maxChar = 0) {\n  if (input.length > 5) {\n    return `${input.substring(0, maxChar)}... (Read More)`;\n  }\n  return input;\n}\n\nexport default truncate;\n","import {\n  Card, Col, Input, PageHeader, Row, Select, Tag,\n} from 'antd';\nimport numeral from 'numeral';\nimport React from 'react';\nimport './App.css';\nimport Services from './utils/api';\nimport truncate from './utils/truncate';\n\nconst { Meta } = Card;\nconst { Option } = Select;\nconst { Search } = Input;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchInput: '',\n      products: [],\n      filterFurnitureStyle: [],\n      filterDeliveryDays: [],\n    };\n  }\n\n  // when component finish render we fetch into api\n  componentDidMount() {\n    // fetch all data from api in one function\n    this.handleFetch();\n  }\n\n  filterSearchInput = (dataFetch = []) => {\n    const { searchInput } = this.state;\n    let newList = [];\n    // do filter dataFetch with parameter from state searchInput\n    newList = dataFetch.filter((item) => {\n      const lc = item.name.toLowerCase();\n      const filter = searchInput.toLowerCase();\n      return lc.includes(filter); // check if each item have filter value from input search\n    });\n\n    this.setState({\n      products: newList,\n    });\n  };\n\n  filterSelectStyle = (dataFetch = []) => {\n    const tempResultFoundFilter = [];\n    const { filterFurnitureStyle, products, searchInput } = this.state;\n\n    if (!filterFurnitureStyle.length) {\n      return;\n    }\n\n    /**\n     * checking if search input value is available\n     * if there is value, use state products instead\n     * it's allow for use multiple filter at same time\n     * but if not we using dataFetch from fetching api as default\n     */\n    const tempDataFilter = searchInput ? products : dataFetch;\n\n    /**\n    * search with paramerter from filterFurnitureStyle search into data tempDataFilter\n    * using 'every' with filterFurnitureStyle for match exact the same value.\n    * if same we save it in tempResultFoundFilter and set it to state products\n    */\n    tempDataFilter.forEach((v) => {\n      const checkAllFounded = filterFurnitureStyle.every((x) => v.furniture_style.includes(x));\n      if (checkAllFounded) {\n        tempResultFoundFilter.push(v);\n      }\n    });\n\n    this.setState({\n      products: tempResultFoundFilter,\n    });\n  };\n\n  filterSelectDelivery = (dataFetch = []) => {\n    const {\n      filterDeliveryDays, products, searchInput, filterFurnitureStyle,\n    } = this.state;\n\n    if (!filterDeliveryDays.length) {\n      return;\n    }\n\n    // Parsing all selected filter delivery days value from JSON String into JSON Array\n    const parseFilterDeliveryDays = filterDeliveryDays.map((x) => JSON.parse(x));\n\n    /**\n     * checking if filterFurnitureStyle or searchInput empty if no, use state products\n     * it's allow for multiple search filter at same time.\n     */\n    const tempDataFilter = (filterFurnitureStyle.length || searchInput) ? products : dataFetch;\n\n    const tempResultFoundFilter = [];\n\n    // loop through array of filterFurnitureStyle\n    parseFilterDeliveryDays.forEach((x) => {\n      /**\n       * filter tempDataFilter with two condition\n       * if delivery_time is more than start and less than end object,\n       * than save it into tempResultFoundFilter\n       * v.delivery_time is String so we do parseInt in order able to compare it.\n       */\n      const result = tempDataFilter.filter((v) => ((parseInt(v.delivery_time, 10) > x.start) && (parseInt(v.delivery_time, 10) <= x.end)));\n\n      /**\n      * it's will produce new array items as many as parseFilterDeliveryDays length\n      * each array will contain search result from every multiple selected delivery days\n      * we need to merge it latter\n      */\n      tempResultFoundFilter.push(result);\n    });\n\n    // merge all result into one array items of object\n    const tempMergedResultFilter = [].concat(...tempResultFoundFilter);\n\n    this.setState({\n      products: tempMergedResultFilter,\n    });\n  };\n\n\n  onFilterFurnitureStyle = (value = '') => {\n    this.setState(\n      {\n        filterFurnitureStyle: value,\n      },\n      () => {\n        this.handleFetch();\n      },\n    );\n  };\n\n  onFilterDeliveryDays = (value = '') => {\n    this.setState(\n      {\n        filterDeliveryDays: value,\n      },\n      () => {\n        this.handleFetch();\n      },\n    );\n  };\n\n  onChangeFilterInput = (e) => {\n    this.setState(\n      {\n        searchInput: e.target.value,\n      },\n      () => {\n        this.handleFetch();\n      },\n    );\n  };\n\n  /**\n  * @function\n  * this function will always rerender according if any state is changed\n  * because we put it in render function.\n  */\n  handleRenderCard = () => {\n    const {\n      products,\n    } = this.state;\n\n    // we will fill component inside componentCard.\n    const componentCard = [];\n\n    /**\n    * if state products changed we will rerender it\n    * do dynamic render add component into componentCard\n    * with value from stae products\n    */\n    products.forEach((v) => {\n      componentCard.push(\n        <Col flex={2} className=\"card\" span={10}>\n          <Card>\n            <Meta\n              title={(\n                <>\n                  <div className=\"float-left\">{v.name}</div>\n                  <div className=\"float-right\">\n                    {`Rp. ${numeral(v.price).format()}`}\n                  </div>\n                </>\n              )}\n              description={(\n                <>\n                  <div className=\"description\">\n                    {truncate(v.description, 114)}\n                  </div>\n                  <div className=\"float-left furniture-style\">\n                    {v.furniture_style.map((x) => <Tag color=\"blue\">{x}</Tag>)}\n                  </div>\n                  <br />\n                  <div className=\"float-right delivery\">{`${v.delivery_time} Day`}</div>\n                </>\n              )}\n            />\n          </Card>\n        </Col>,\n      );\n    });\n    return componentCard;\n  };\n\n  handleFetch() {\n    const {\n      filterDeliveryDays, searchInput, filterFurnitureStyle,\n    } = this.state;\n\n    // fetch all data from api in one function\n    new Services().get('5c9105cb330000112b649af8').then(({ products }) => {\n      /**\n      *  checking all filter if all state value is empty we block it and return result fetch\n      *  without any proccess in filter and set it into products state\n      */\n      if ((filterFurnitureStyle.length <= 0)\n        && (!searchInput)\n        && (filterDeliveryDays.length <= 0)\n      ) {\n        this.setState({\n          products,\n        });\n        return;\n      }\n\n      // do filter by search input with fetching result\n      this.filterSearchInput(products);\n      // do filter by multi select style products\n      this.filterSelectStyle(products);\n      // do filter by multi select delivery time\n      this.filterSelectDelivery(products);\n    });\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Row className=\"container header-tools\" type=\"flex\">\n          <Col span={24}>\n            <PageHeader ghost={false}>\n              <Row gutter={[1, 24]}>\n                <Col span={11}>\n                  <Search\n                    placeholder=\"Search Furniture\"\n                    onChange={this.onChangeFilterInput}\n                  />\n                </Col>\n              </Row>\n              <Row gutter={24}>\n                <Col span={12}>\n                  <Select\n                    mode=\"multiple\"\n                    style={{ width: '100%' }}\n                    placeholder=\"Furniture Style\"\n                    onChange={this.onFilterFurnitureStyle}\n                  >\n                    <Option key=\"Classic\">Classic</Option>\n                    <Option key=\"Midcentury\">Midcentury</Option>\n                    <Option key=\"Scandinavian\">Scandinavian</Option>\n                    <Option key=\"Modern\">Modern</Option>\n                    <Option key=\"Contemporary\">Contemporary</Option>\n                  </Select>\n                </Col>\n\n                <Col span={12}>\n                  <Select\n                    mode=\"multiple\"\n                    style={{ width: '100%' }}\n                    placeholder=\"Delivery Days\"\n                    onChange={this.onFilterDeliveryDays}\n                  >\n                    <Option key={'{\"start\":0, \"end\":7}'}>1 Week</Option>\n                    <Option key={'{\"start\":7, \"end\":14}'}>2 weeks</Option>\n                    <Option key={'{\"start\":14, \"end\":30}'}>1 month</Option>\n                  </Select>\n                </Col>\n              </Row>\n            </PageHeader>\n          </Col>\n        </Row>\n        <Row className=\"container\" type=\"flex\">\n          {/* do render in separate function */}\n          {this.handleRenderCard()}\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}